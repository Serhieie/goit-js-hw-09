{"mappings":"qhBAuDA,IAAAA,EAAAC,EAAA,SACAC,EAAAF,GAASG,OAAOC,KAAK,CACnBC,MAAO,QACPC,SAAU,YACVC,aAAa,IAGf,IAAIC,EAAQ,EACRC,EAAa,EACjB,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,uBAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,yBAwBjC,SAASI,EAAcX,EAAUQ,GACf,IAAII,SAAQ,CAACC,EAAKC,KACVC,KAAKC,SAAW,GAEpCH,EAAI,C,SAAEb,E,MAAUQ,IAEhBM,EAAI,C,SAAEd,E,MAAUQ,GAAQ,IAIzBS,MAAK,EAACjB,SAAEA,EAAQQ,MAAEA,MACjBZ,EAAAF,GAASG,OAAOqB,QACd,uBAAqBhB,QAAcC,MAAe,IAGrDgB,OAAM,EAACnB,SAAEA,EAAQQ,MAAEA,MAClBZ,EAAAF,GAASG,OAAOuB,QACd,sBAAoBlB,QAAYC,MAAe,G,CAtCvDC,EAAKC,KAAKgB,iBAAiB,UAAUC,IACnCpB,EAAQ,EACRoB,EAAIC,iBACJC,YAAW,KACTtB,EAAQ,EACRS,EAAcc,OAAOrB,EAAKK,KAAKiB,OAAQD,OAAOrB,EAAKI,MAAMkB,QACzDvB,EAAasB,OAAOrB,EAAKI,MAAMkB,OAC/B,MAAMC,EAAaC,aAAY,KAC7BzB,GAAcsB,OAAOrB,EAAKK,KAAKiB,OAC/BxB,GAAS,EACTS,EAAcc,OAAOrB,EAAKK,KAAKiB,OAAQD,OAAOrB,EAAKI,MAAMkB,QACrDxB,GAASuB,OAAOrB,EAAKM,OAAOgB,SAC9BtB,EAAKK,KAAKiB,MAAQ,GAClBtB,EAAKI,MAAMkB,MAAQ,GACnBtB,EAAKM,OAAOgB,MAAQ,GACpBG,cAAcF,G,GAEfF,OAAOrB,EAAKK,KAAKiB,OAAO,GAC1BD,OAAOrB,EAAKI,MAAMkB,OAAO","sources":["src/js/03-promises.js"],"sourcesContent":["// import Notiflix from 'notiflix';\n// Notiflix.Notify.init({\n//   width: '300px',\n//   position: 'right-top',\n//   closeButton: false,\n// });\n\n// let count = 0;\n\n// const refs = {\n//   form: document.querySelector('.form'),\n//   delay: document.querySelector('input[name=\"delay\"]'),\n//   step: document.querySelector('input[name=\"step\"]'),\n//   amount: document.querySelector('input[name=\"amount\"]'),\n// };\n\n// refs.form.addEventListener('submit', evt => {\n//   evt.preventDefault();\n//   createPromise(refs.step.value, refs.delay.value);\n// });\n\n// function createPromise(position, delay) {\n//   return new Promise((res, rej) => {\n//     setTimeout(() => {\n//       let result = parseFloat(delay);\n//       let positionNum = parseFloat(position);\n//       const intervalId = setInterval(() => {\n//         count += 1;\n//         const shouldResolve = Math.random() > 0.3;\n//         if (shouldResolve) {\n//           res(\n//             Notiflix.Notify.success(\n//               `✅ Fulfilled promise ${count} in ${result}ms`\n//             )\n//           );\n//         } else {\n//           rej(\n//             Notiflix.Notify.failure(\n//               `❌ Rejected promise ${count} in ${result}ms`\n//             )\n//           );\n//         }\n//         result += positionNum;\n//         if (count === Number(refs.amount.value)) {\n//           refs.step.value = '';\n//           refs.delay.value = '';\n//           refs.amount.value = '';\n//           clearInterval(intervalId);\n//           count = 0;\n//         }\n//       }, position);\n//     }, delay);\n//   });\n// }\n\nimport Notiflix from 'notiflix';\nNotiflix.Notify.init({\n  width: '300px',\n  position: 'right-top',\n  closeButton: false,\n});\n\nlet count = 0;\nlet totalDelay = 0;\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n};\n\nrefs.form.addEventListener('submit', evt => {\n  count = 0;\n  evt.preventDefault();\n  setTimeout(() => {\n    count = 1;\n    createPromise(Number(refs.step.value), Number(refs.delay.value));\n    totalDelay = Number(refs.delay.value);\n    const intervalId = setInterval(() => {\n      totalDelay += Number(refs.step.value);\n      count += 1;\n      createPromise(Number(refs.step.value), Number(refs.delay.value));\n      if (count >= Number(refs.amount.value)) {\n        refs.step.value = '';\n        refs.delay.value = '';\n        refs.amount.value = '';\n        clearInterval(intervalId);\n      }\n    }, Number(refs.step.value));\n  }, Number(refs.delay.value));\n});\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((res, rej) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      res({ position, delay });\n    } else {\n      rej({ position, delay });\n    }\n  });\n  promise\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(\n        `✅ Fulfilled promise ${count} in ${totalDelay}ms`\n      );\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(\n        `❌ Rejected promise ${count} in ${totalDelay}ms`\n      );\n    });\n}\n"],"names":["$7Y9D8","parcelRequire","$parcel$interopDefault","Notify","init","width","position","closeButton","$47d4ff9957288465$var$count","$47d4ff9957288465$var$totalDelay","$47d4ff9957288465$var$refs","form","document","querySelector","delay","step","amount","$47d4ff9957288465$var$createPromise","Promise","res","rej","Math","random","then","success","catch","failure","addEventListener","evt","preventDefault","setTimeout","Number","value","intervalId","setInterval","clearInterval"],"version":3,"file":"03-promises.aeae4e97.js.map"}